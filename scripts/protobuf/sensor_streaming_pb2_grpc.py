# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sensor_streaming_pb2 as sensor__streaming__pb2


class SensorStreamingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamCameraSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamCameraSensor',
                request_serializer=sensor__streaming__pb2.CameraStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamLidarSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamLidarSensor',
                request_serializer=sensor__streaming__pb2.LidarStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamRadarSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamRadarSensor',
                request_serializer=sensor__streaming__pb2.RadarStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamDepthSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamDepthSensor',
                request_serializer=sensor__streaming__pb2.DepthStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamDvlSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamDvlSensor',
                request_serializer=sensor__streaming__pb2.DvlStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamGnssSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamGnssSensor',
                request_serializer=sensor__streaming__pb2.GnssStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamImuSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamImuSensor',
                request_serializer=sensor__streaming__pb2.ImuStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamPoseSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamPoseSensor',
                request_serializer=sensor__streaming__pb2.PoseStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )
        self.StreamSonarSensor = channel.stream_unary(
                '/sensorstreaming.SensorStreaming/StreamSonarSensor',
                request_serializer=sensor__streaming__pb2.SonarStreamingRequest.SerializeToString,
                response_deserializer=sensor__streaming__pb2.StreamingResponse.FromString,
                )


class SensorStreamingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamCameraSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLidarSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRadarSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamDepthSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamDvlSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamGnssSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamImuSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPoseSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSonarSensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorStreamingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamCameraSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamCameraSensor,
                    request_deserializer=sensor__streaming__pb2.CameraStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamLidarSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamLidarSensor,
                    request_deserializer=sensor__streaming__pb2.LidarStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamRadarSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamRadarSensor,
                    request_deserializer=sensor__streaming__pb2.RadarStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamDepthSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamDepthSensor,
                    request_deserializer=sensor__streaming__pb2.DepthStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamDvlSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamDvlSensor,
                    request_deserializer=sensor__streaming__pb2.DvlStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamGnssSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamGnssSensor,
                    request_deserializer=sensor__streaming__pb2.GnssStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamImuSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamImuSensor,
                    request_deserializer=sensor__streaming__pb2.ImuStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamPoseSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamPoseSensor,
                    request_deserializer=sensor__streaming__pb2.PoseStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
            'StreamSonarSensor': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamSonarSensor,
                    request_deserializer=sensor__streaming__pb2.SonarStreamingRequest.FromString,
                    response_serializer=sensor__streaming__pb2.StreamingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sensorstreaming.SensorStreaming', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SensorStreaming(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamCameraSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamCameraSensor',
            sensor__streaming__pb2.CameraStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamLidarSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamLidarSensor',
            sensor__streaming__pb2.LidarStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamRadarSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamRadarSensor',
            sensor__streaming__pb2.RadarStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamDepthSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamDepthSensor',
            sensor__streaming__pb2.DepthStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamDvlSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamDvlSensor',
            sensor__streaming__pb2.DvlStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamGnssSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamGnssSensor',
            sensor__streaming__pb2.GnssStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamImuSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamImuSensor',
            sensor__streaming__pb2.ImuStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamPoseSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamPoseSensor',
            sensor__streaming__pb2.PoseStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSonarSensor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sensorstreaming.SensorStreaming/StreamSonarSensor',
            sensor__streaming__pb2.SonarStreamingRequest.SerializeToString,
            sensor__streaming__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
